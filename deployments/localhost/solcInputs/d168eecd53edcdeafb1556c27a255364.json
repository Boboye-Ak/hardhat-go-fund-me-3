{
  "language": "Solidity",
  "sources": {
    "contracts/CrowdFunder.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"./Cause.sol\";\r\n\r\ncontract CrowdFunder {\r\n    //STATE VARIABLES\r\n    address payable public immutable i_crowdFunderOwner;\r\n    mapping(address => address) public walletToCauseOwned;\r\n    mapping(address => uint256) public hasCause;\r\n    uint256 public immutable i_percentCut;\r\n    uint256 public s_nextCauseId;\r\n    Cause[] public s_causes;\r\n\r\n    //CUSTOM ERRORS\r\n    error CrowdFunder__OnlyOwnerCanCallThis();\r\n    error CrowdFunder__ThisWalletAlreadyHasACause();\r\n    error CrowdFunder__ErrorWithdrawing();\r\n\r\n    //EVENTS\r\n    event CauseCreated(address indexed causeAddress);\r\n    event DonationReceived(uint256 indexed amount);\r\n    event WithdrawalMade(uint256 indexed amount);\r\n\r\n    //MODIFIERS\r\n    modifier onlyOwner() {\r\n        if (msg.sender != i_crowdFunderOwner) {\r\n            revert CrowdFunder__OnlyOwnerCanCallThis();\r\n        }\r\n        _;\r\n    }\r\n\r\n    //CONSTRUCTOR\r\n    constructor(\r\n        uint256 percentCut /*Percentage given in Basis Points ie 100 basis points=1% */\r\n    ) {\r\n        i_crowdFunderOwner = payable(msg.sender);\r\n        i_percentCut = percentCut;\r\n        s_nextCauseId = 1;\r\n    }\r\n\r\n    //RECEIVE AND FALLBACK FUNCTIONS\r\n    receive() external payable {\r\n        emit DonationReceived(msg.value);\r\n    }\r\n\r\n    fallback() external payable {\r\n        emit DonationReceived(msg.value);\r\n    }\r\n\r\n    //PURE FUNCTIONS\r\n    //Create Cause Function\r\n    function createCause(string memory causeName, uint256 goal)\r\n        public\r\n        returns (address)\r\n    {\r\n        if (hasCause[msg.sender] != 0) {\r\n            revert CrowdFunder__ThisWalletAlreadyHasACause();\r\n        }\r\n        Cause newCause = new Cause(\r\n            causeName,\r\n            goal,\r\n            payable(msg.sender),\r\n            i_percentCut,\r\n            s_nextCauseId\r\n        );\r\n        s_causes.push(newCause);\r\n        walletToCauseOwned[msg.sender] = address(newCause);\r\n        hasCause[msg.sender] = s_nextCauseId;\r\n        s_nextCauseId = s_nextCauseId + 1;\r\n        emit CauseCreated(address(newCause));\r\n        return address(newCause);\r\n    }\r\n\r\n    function sponsorSite() public payable {\r\n        emit DonationReceived(msg.value);\r\n    }\r\n\r\n    //Withdraw Function\r\n    function withdraw() public payable onlyOwner {\r\n        uint256 amount = address(this).balance;\r\n        bool success = payable(msg.sender).send(amount);\r\n        if (!success) {\r\n            revert CrowdFunder__ErrorWithdrawing();\r\n        }\r\n    }\r\n\r\n    //VIEW FUNCTIONS\r\n    function getCauseById(uint256 causeId) public view returns (address) {\r\n        address causeAddress = address(s_causes[causeId - 1]);\r\n        return causeAddress;\r\n    }\r\n\r\n    function getCauseAddressByOwnerWallet(address owner)\r\n        public\r\n        view\r\n        returns (address)\r\n    {\r\n        address causeAddress = walletToCauseOwned[owner];\r\n        return causeAddress;\r\n    }\r\n\r\n    function getMyCause() public view returns (uint256, address) {\r\n        address causeAddress = getCauseAddressByOwnerWallet(msg.sender);\r\n        uint256 causeId = hasCause[msg.sender];\r\n        return (causeId, causeAddress);\r\n    }\r\n\r\n    function getContractBalance() public view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n}\r\n"
    },
    "contracts/Cause.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\ncontract Cause {\r\n    //State Variables\r\n    uint256 public s_causeBalance;\r\n    uint256 public immutable i_goal;\r\n    uint256 public immutable i_percentCut;\r\n    uint256 public immutable i_causeId;\r\n    bool public s_isGoalReached;\r\n    bool public s_isOpenToDonations;\r\n    bool internal s_isWithdrawn;\r\n    address public s_causeOwner;\r\n    address public s_causeCreatorContract;\r\n    string public s_causeName;\r\n    string public s_causeURI;\r\n    mapping(address => uint256) public donorToAmountDonated;\r\n    address[] public donorList;\r\n\r\n    //Custom Errors\r\n    error Cause__IsNotOpenToDonations();\r\n    error Cause__GoalAlreadyReached();\r\n    error Cause__OnlyCauseOwnerCanCall();\r\n    error Cause__ErrorWithdrawing();\r\n    error Cause__CannotOpenToDonationsAfterWithdrawal();\r\n\r\n    //Events\r\n    event DonationMade(address indexed donor, uint256 amount);\r\n    event WithdrawalMade(address indexed withdrawer, uint256 amount);\r\n    event IsOpenToDonationsSwitched(bool isOpenToDonations);\r\n    event OwnershipChanged(address indexed newOwner);\r\n    event CauseURISet(string causeURI);\r\n\r\n    modifier onlyOwner() {\r\n        if (msg.sender != s_causeOwner) {\r\n            revert Cause__OnlyCauseOwnerCanCall();\r\n        }\r\n        _;\r\n    }\r\n\r\n    //Constructor\r\n    constructor(\r\n        string memory causeName,\r\n        uint256 goal,\r\n        address payable causeOwner,\r\n        uint256 percentCut,\r\n        uint256 causeId\r\n    ) {\r\n        s_causeCreatorContract = msg.sender;\r\n        s_causeName = causeName;\r\n        s_causeOwner = causeOwner;\r\n        i_goal = goal;\r\n        s_isOpenToDonations = true;\r\n        i_percentCut = percentCut;\r\n        i_causeId = causeId;\r\n    }\r\n\r\n    //Receive and Fallback Functions\r\n    receive() external payable {\r\n        donate();\r\n    }\r\n\r\n    fallback() external payable {\r\n        donate();\r\n    }\r\n\r\n    //PURE FUNCTIONS\r\n    //Donate Function\r\n    function donate() public payable {\r\n        if (s_isGoalReached) {\r\n            revert Cause__GoalAlreadyReached();\r\n        }\r\n        if (!s_isOpenToDonations) {\r\n            revert Cause__IsNotOpenToDonations();\r\n        }\r\n\r\n        s_causeBalance += msg.value;\r\n        donorList.push(msg.sender);\r\n        donorToAmountDonated[msg.sender] += msg.value;\r\n        if (s_causeBalance >= i_goal) {\r\n            s_isGoalReached = true;\r\n            s_isOpenToDonations = false;\r\n        }\r\n        emit DonationMade(msg.sender, msg.value);\r\n    }\r\n\r\n    //Withdraw Function\r\n    function withdraw() public onlyOwner {\r\n        uint256 amount = address(this).balance;\r\n        uint256 parentContractCut = ((amount * i_percentCut) / 10000);\r\n        bool paymentToParentSuccess = payable(s_causeCreatorContract).send(\r\n            parentContractCut\r\n        );\r\n        if (!paymentToParentSuccess) {\r\n            revert Cause__ErrorWithdrawing();\r\n        }\r\n        bool withdrawalSuccess = payable(msg.sender).send(\r\n            address(this).balance\r\n        );\r\n        if (!withdrawalSuccess) {\r\n            revert Cause__ErrorWithdrawing();\r\n        } else {\r\n            s_isOpenToDonations = false;\r\n            s_causeBalance = 0;\r\n            s_isWithdrawn = true;\r\n            emit WithdrawalMade(msg.sender, amount);\r\n        }\r\n    }\r\n\r\n    function changeOwnership(address payable newOwner) public onlyOwner {\r\n        s_causeOwner = newOwner;\r\n        emit OwnershipChanged(newOwner);\r\n    }\r\n\r\n    function switchIsOpenToDonations() public onlyOwner {\r\n        if (s_isOpenToDonations) {\r\n            s_isOpenToDonations = false;\r\n        } else {\r\n            if (s_isWithdrawn) {\r\n                revert Cause__CannotOpenToDonationsAfterWithdrawal();\r\n            } else {\r\n                s_isOpenToDonations = true;\r\n            }\r\n        }\r\n        emit IsOpenToDonationsSwitched(s_isOpenToDonations);\r\n    }\r\n\r\n    function setCauseURI(\r\n        string memory causeURI /* Will be the URI of an IPFS Json file  */\r\n    ) public onlyOwner {\r\n        s_causeURI = causeURI;\r\n    }\r\n\r\n    //VIEW FUNCTIONS\r\n    function getCauseBalance() public view returns (uint256) {\r\n        return s_causeBalance;\r\n    }\r\n\r\n    function getGoal() public view returns (uint256) {\r\n        return i_goal;\r\n    }\r\n\r\n    function getCauseName() public view returns (string memory) {\r\n        return s_causeName;\r\n    }\r\n\r\n    function getCauseOwner() public view returns (address) {\r\n        return s_causeOwner;\r\n    }\r\n\r\n    function getIsGoalReached() public view returns (bool) {\r\n        return s_isGoalReached;\r\n    }\r\n\r\n    function getIsOpenToDonations() public view returns (bool) {\r\n        return s_isOpenToDonations;\r\n    }\r\n\r\n    function getCauseUri() public view returns (string memory) {\r\n        return s_causeURI;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}